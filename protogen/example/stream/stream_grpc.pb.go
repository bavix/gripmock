// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.24.4
// source: stream.proto

package stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Gripmock_ServerStream_FullMethodName  = "/stream.Gripmock/serverStream"
	Gripmock_ClientStream_FullMethodName  = "/stream.Gripmock/clientStream"
	Gripmock_Bidirectional_FullMethodName = "/stream.Gripmock/bidirectional"
)

// GripmockClient is the client API for Gripmock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Gripmock service definition.
type GripmockClient interface {
	// server to client sreaming
	ServerStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Gripmock_ServerStreamClient, error)
	// client to server streaming
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Gripmock_ClientStreamClient, error)
	// bidirectional streaming
	Bidirectional(ctx context.Context, opts ...grpc.CallOption) (Gripmock_BidirectionalClient, error)
}

type gripmockClient struct {
	cc grpc.ClientConnInterface
}

func NewGripmockClient(cc grpc.ClientConnInterface) GripmockClient {
	return &gripmockClient{cc}
}

func (c *gripmockClient) ServerStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Gripmock_ServerStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Gripmock_ServiceDesc.Streams[0], Gripmock_ServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &gripmockServerStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gripmock_ServerStreamClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type gripmockServerStreamClient struct {
	grpc.ClientStream
}

func (x *gripmockServerStreamClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gripmockClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Gripmock_ClientStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Gripmock_ServiceDesc.Streams[1], Gripmock_ClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &gripmockClientStreamClient{ClientStream: stream}
	return x, nil
}

type Gripmock_ClientStreamClient interface {
	Send(*Request) error
	CloseAndRecv() (*Reply, error)
	grpc.ClientStream
}

type gripmockClientStreamClient struct {
	grpc.ClientStream
}

func (x *gripmockClientStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gripmockClientStreamClient) CloseAndRecv() (*Reply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gripmockClient) Bidirectional(ctx context.Context, opts ...grpc.CallOption) (Gripmock_BidirectionalClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Gripmock_ServiceDesc.Streams[2], Gripmock_Bidirectional_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &gripmockBidirectionalClient{ClientStream: stream}
	return x, nil
}

type Gripmock_BidirectionalClient interface {
	Send(*Request) error
	Recv() (*Reply, error)
	grpc.ClientStream
}

type gripmockBidirectionalClient struct {
	grpc.ClientStream
}

func (x *gripmockBidirectionalClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gripmockBidirectionalClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GripmockServer is the server API for Gripmock service.
// All implementations must embed UnimplementedGripmockServer
// for forward compatibility
//
// The Gripmock service definition.
type GripmockServer interface {
	// server to client sreaming
	ServerStream(*Request, Gripmock_ServerStreamServer) error
	// client to server streaming
	ClientStream(Gripmock_ClientStreamServer) error
	// bidirectional streaming
	Bidirectional(Gripmock_BidirectionalServer) error
	mustEmbedUnimplementedGripmockServer()
}

// UnimplementedGripmockServer must be embedded to have forward compatible implementations.
type UnimplementedGripmockServer struct {
}

func (UnimplementedGripmockServer) ServerStream(*Request, Gripmock_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedGripmockServer) ClientStream(Gripmock_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedGripmockServer) Bidirectional(Gripmock_BidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method Bidirectional not implemented")
}
func (UnimplementedGripmockServer) mustEmbedUnimplementedGripmockServer() {}

// UnsafeGripmockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GripmockServer will
// result in compilation errors.
type UnsafeGripmockServer interface {
	mustEmbedUnimplementedGripmockServer()
}

func RegisterGripmockServer(s grpc.ServiceRegistrar, srv GripmockServer) {
	s.RegisterService(&Gripmock_ServiceDesc, srv)
}

func _Gripmock_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GripmockServer).ServerStream(m, &gripmockServerStreamServer{ServerStream: stream})
}

type Gripmock_ServerStreamServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type gripmockServerStreamServer struct {
	grpc.ServerStream
}

func (x *gripmockServerStreamServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func _Gripmock_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GripmockServer).ClientStream(&gripmockClientStreamServer{ServerStream: stream})
}

type Gripmock_ClientStreamServer interface {
	SendAndClose(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type gripmockClientStreamServer struct {
	grpc.ServerStream
}

func (x *gripmockClientStreamServer) SendAndClose(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gripmockClientStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gripmock_Bidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GripmockServer).Bidirectional(&gripmockBidirectionalServer{ServerStream: stream})
}

type Gripmock_BidirectionalServer interface {
	Send(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type gripmockBidirectionalServer struct {
	grpc.ServerStream
}

func (x *gripmockBidirectionalServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gripmockBidirectionalServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Gripmock_ServiceDesc is the grpc.ServiceDesc for Gripmock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gripmock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.Gripmock",
	HandlerType: (*GripmockServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "serverStream",
			Handler:       _Gripmock_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "clientStream",
			Handler:       _Gripmock_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "bidirectional",
			Handler:       _Gripmock_Bidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
